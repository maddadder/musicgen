@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR
@inject RabbitMqService RabbitMqService
@inject FileUploadService FileUploadService
@inject NavigationManager navigationManager
@inject IWebHostEnvironment WebHostEnvironment
<PageTitle>MusicGen</PageTitle>

<h3>MusicGen</h3>
<table>
    <tr>
        <td>
            <label for="fileInput">Upload Audio File:</label>
        </td>
        <td>
            <InputFile id="fileInput" OnChange="HandleFileUpload" />
        </td>
    </tr>
    <tr>
        <td>
            <label for="textInput">Prompt:</label>
        </td>
        <td>
            <InputTextArea id="textInput" @bind-Value="text" style="height: auto; max-width: 200px;" />
        </td>
    </tr>
    <tr>
        <td>
            <label for="durationInput">Duration:</label>
        </td>
        <td>
            <InputText id="durationInput" @bind-Value="duration" style="max-width: 200px;" />
        </td>
    </tr>
    <tr>
        <td>
            <label>Actions:</label>
        </td>
        <td>
           <button @onclick="GenerateMusic">Generate Music</button>
           <button @onclick="SendInterrupt">Interrupt</button>
        </td>
    </tr>
</table>

<div>&#160;</div>
<div>Queue Legth: @queueLength</div>
<div>&#160;</div>
<h3>Status</h3>
<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<h3>Files List</h3>

<ul>
    @for (var i = 0; i < FileNames.Count; i++)
    {
        int index = i;
        var item = FileNames[index];
        <li>
            <input type="checkbox" id="@($"checkbox_{item.FileName}")" checked="@item.isChecked" @onchange="@(e => ToggleCheckbox(e, index))" />
            <label for="@($"checkbox_{item.FileName}")">
                <a target="_blank" href="audio/@item.FileName">@item.FileName</a>
            </label>
        </li>
    }
</ul>

<h3>Selected Files</h3>
<ul>
    @foreach (var item in SelectedFiles)
    {
        <li>@item.FileName</li>
    }
</ul>
<button @onclick="DeleteSelectedFiles">Delete Selected</button>




@code {
    private int queueLength = 0;
    private string text;
    private string duration;
    private IBrowserFile file;
    private List<string> messages = new List<string>();
    private HubConnection _hubConnection;
    private List<CheckboxItem> FileNames { get; set; } = new List<CheckboxItem>();
    private List<CheckboxItem> SelectedFiles { get; set; } = new List<CheckboxItem>();
    
    private async Task SendInterrupt()
    {
        RabbitMqService.SendInterrupt();
    }
    
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task GenerateMusic()
    {
        if (file != null)
        {
            var audioFileContent = await FileUploadService.SaveFile(file);
            RabbitMqService.SendMusicGenRequest(text, duration, audioFileContent);
            queueLength += 1;
        }
        else
        {
            // Handle case where no file is selected
        }
    }
    

    protected override async Task OnInitializedAsync()
    {
        string baseUrl = navigationManager.BaseUri;

        string _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On<string>("Broadcast", ReceiveMessage);

        await _hubConnection.StartAsync();

        //await _hubConnection.SendAsync("Broadcast", "initialized");

        // Retrieve MP3 file names from the server
        var folderPath = Path.Combine(WebHostEnvironment.ContentRootPath, "audio");
        FileNames = getFiles();
        SelectedFiles.Clear();
        await base.OnInitializedAsync();
    }
    private void ReceiveMessage(string message)
    {
        queueLength -= 1;
        messages.Add(message);
        FileNames = getFiles();
        SelectedFiles.Clear();
        // Inform blazor the UI needs updating
        InvokeAsync(StateHasChanged);
    }
    private List<CheckboxItem> getFiles()
    {
        // Retrieve MP3 file names from the server
        var folderPath = Path.Combine(WebHostEnvironment.ContentRootPath, "audio");
        return Directory.GetFiles(folderPath, "*.*")
                        .Where(file => file.EndsWith(".mp3") || file.EndsWith(".txt"))
                        .Select(Path.GetFileName)
                        .OrderBy(x => x)
                        .ToList().Select(x => new CheckboxItem{ FileName = x, isChecked = false })
                        .ToList();
    }

    private void ToggleCheckbox(ChangeEventArgs e, int index)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked && !SelectedFiles.Contains(FileNames[index]))
        {
            SelectedFiles.Add(FileNames[index]);
        }
        else if (!isChecked && SelectedFiles.Contains(FileNames[index]))
        {
            SelectedFiles.Remove(FileNames[index]);
        }

        FileNames[index].isChecked = isChecked;
    }

    private void DeleteSelectedFiles()
    {
        for (var i = SelectedFiles.Count - 1; i >= 0; i--)
        {
            var item = SelectedFiles[i];
            var filePath = $"audio/{item.FileName}";

            try
            {
                if (File.Exists(filePath))
                {
                    File.Delete(filePath);
                    FileNames.Remove(item); // Remove the file from the list
                }
            }
            catch (Exception ex)
            {
                // Handle any exceptions during file deletion
                Console.WriteLine($"Error deleting file {filePath}: {ex.Message}");
            }
        }

        SelectedFiles.Clear(); // Clear the list of selected files after deletion
    }
}
